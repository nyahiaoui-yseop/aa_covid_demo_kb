{
    "intention activation rule": {
        "scope": "yml",
        "prefix": "rule",
        "body": [
"ActivationRule ${1:RULENAME}",
"if (?intention.LibDocument:KPIIntention::kpi == ${2:kpiId}",
"\t?intention.isInstanceOf(${4:IntentionClass}) == true",
"\t?intentionRef in RULES_EXECUTION_CONTEXT.runningRule.zombieIntentions",
"\t?intention.dimensionConditions == ?intentionRef.dimensionConditions",
"\t?intentionRef.areSelectionsSatisfied() == true",
"\t)",
"then",
"\tif(${6:Condition over ?intention and ?intentionRef})",
"\t\t?intention.Text::active = true;",
"\telse",
"\t\t?intention.Text::active = false;",
"--> kpi ${2}",
"--> kpiRef ${3:RefKpiId}",
"--> intentionClassRef ${5:?intentionRefClass}",
";$0",
        ],
        "description": "Insert a new Activation Rule."
    },
    "documentation attribute": {
        "scope": "yml",
        "prefix": "doc",
        "body": [
            "--> documentation \"\"\"${1:documentation string}\"\"\"$0"
        ],
        "description": "insert a documentation attribute"
    },
    "kpis relation": {
        "scope": "yml",
        "prefix": "relation",
        "body": [
"-> LibKPI:Relation",
"\t// The type of relations between the two KPIs.",
"\t--> relationType RelationType::HIERARCHY",
"\t// The parent KPI, in the case of a hierarchical relationship.",
"\t--> issuerKPI kpi${1}",
"\t// The child KPI, in the case of a hierarchical relationship.",
"\t--> receiverKPI kpi${2}",
";$0",
        ],
        "description": "insert a new LibKPI:Relation as inline instance"
    },
    "custom intention": {
        "scope": "yml",
        "prefix": "customTextIntention",
        "body": [
"interface ${1:IntentionClassName} extends LibDocument:CustomIntention",
"// Intention's new attributes, if needed",
";",
"",
"implementation ${1}",
"\toverride {",
"\t\tonBeforeDataCollection function",
"\t\tcomputeValues function",
"\t\twriteCustomText function",
"\t}",
";",
"",
"function ${1}::onBeforeDataCollection",
"args {}",
"--> domains Void",
"--> action {",
"\tlogTrace(\"${1}::onBeforeDataCollection\");",
"\t// intialise the computedValues attribute.",
"\t// create another new class named ${1}ComputedValues with the “cmpVal” snippet if Computed Values are required",
"\t// this.computedValues = new(${1}ComputedValues);",
"};",
"",
"function ${1}::computeValues",
"args {",
"",
"}",
"--> action {",
"\t// Compute the computed values here",
"};",
"",
"textMethod ${1}::writeCustomText()",
"--> text \\(",
"\t// Your text as TextGranule. You can also replace this TextGranule with anything that has the `Text` type.",
"\t${0}",
"\\)",
";",
"",
        ],
        "description": "create a new Custom Text Intention class"
    },
    "custom intention computed values": {
        "scope": "yml",
        "prefix": "computedVal",
        "body": [
"interface ${1:IntentionClassName}ComputedValues extends LibDocument:CustomIntentionComputedValues",
"",
"\tfield ${2:myComputedValue}",
"\t--> domains LibDocument:ComputedValue",
"",
"\t// other computed value here",
"\t$0",
"",
";",
"",
"implementation ${1}ComputedValues",
"\toverride {",
"\t\tvalidate function",
"\t}",
";",
"",
"function ${1}ComputedValues::validate()",
"--> action {",
"\tassert(${2} != null && ${2}.getValue() != null, \"The computed value “${2}” was null or its value was null.\");",
"};",

        ]
    },
    "new KPI": {
        "scope": "yml",
        "prefix": "kpi",
        "body": [
"${2|LibDocument:KeyPerformanceIndicator,AmountKPI,NumberKPI,RatioKPI|} kpi${1:INDICATOR_NAME}",
"\t--> documentation \"\"\"KPI for the indicator `${1}`\"\"\"",
"\t--> indicator   ${1}",
"\t--> customConceptsConfigurations -> LibDocument:RoutedCustomConceptsConfiguration",
"\t\t--> route -> LibDocument:Route",
"\t\t\t--> intentions LibDocument:Intention",
"\t\t\t;",
"\t\t--> customConceptsConfiguration -> MultilingualExpression",
"\t\t\t --> fr -> LibDocument:CustomConceptsConfiguration",
"\t\t\t\t--> configValues {",
"\t\t\t\t\tLibDocument:SemanticSlot::Indicator : -> LibDocument:DynamicCustomTexts",
"\t\t\t\t\t\t--> customTexts {",
"\t\t\t\t\t\t\t-> LibDocument:CustomText",
"\t\t\t\t\t\t\t\t--> synonyms -> LibOntology:NounPhrase",
"\t\t\t\t\t\t\t\t\t--> head \"${3}\"",
"\t\t\t\t\t\t\t\t\t--> gender ${4|MASCULINE,FEMININE|}",
"\t\t\t\t\t\t\t\t\t--> number ${5|SINGULAR,PLURAL|}",
"\t\t\t\t\t\t\t\t\t--> determiner DEFINITE_ARTICLE",
"\t\t\t\t\t\t\t\t;",
"\t\t\t\t\t\t\t;",
"\t\t\t\t\t\t}",
"\t\t\t\t\t;",
"\t\t\t\t}",
"\t\t\t;",
"\t\t\t--> en -> LibDocument:CustomConceptsConfiguration",
"\t\t\t\t--> configValues {",
"\t\t\t\t\tLibDocument:SemanticSlot::Indicator : -> LibDocument:DynamicCustomTexts",
"\t\t\t\t\t\t--> customTexts {",
"\t\t\t\t\t\t\t-> LibDocument:CustomText",
"\t\t\t\t\t\t\t\t--> synonyms -> LibOntology:NounPhrase",
"\t\t\t\t\t\t\t\t\t--> head \"${6}\"",
"\t\t\t\t\t\t\t\t\t--> number ${7|SINGULAR,PLURAL|}",
"\t\t\t\t\t\t\t\t;",
"\t\t\t\t\t\t\t;",
"\t\t\t\t\t\t}",
"\t\t\t\t\t;",
"\t\t\t\t}",
"\t\t\t;",
"\t\t;",
"\t;",
";",

        ]
    },
    "new indicator": {
        "scope": "yml",
        "prefix": "indicator",
        "body": [
"LibCube:IndicatorMember ${1:INDICATOR NAME}",
"--> category Finance:Category::${2|INCOME_STATEMENT,BALANCE_SHEET,CASH_FLOW_STATEMENT,OTHER,RATIO|}",
"--> accountingFramework ${3|AccountingFramework::FRENCH_GAAP,AccountingFramework::IFRS|}",
";",
        ],
        "description": "Insert a new instance of indicator for financial reporting."
    }
}
